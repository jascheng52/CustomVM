Number of registers: 16
Word Length: 32 bits / 4 bytes
OPCODE Length: 4 bits/ 1 byte

32 bit integers
32 bit pointers


‚Å°‚Å£‚Å¢‚Å¢ùó•ùó≤ùó¥ùó∂ùòÄùòÅùó≤ùóøùòÄ ùó°ùòÇùó∫ùóØùó≤ùóø    | ùó£ùòÇùóøùóΩùóºùòÄùó≤‚Å°
---------------------
    0               | general
    1               | general
    2               | general
    3               | general
    5               | general
    6               | general
    7               | general
    8(a0)           | arg 0
    9(a1)           | arg 1
    10(rt)          | return value
    11(fp)          | frame pointer
    12(sp)          | stack pointer
    13(lo)          | low bits mult
    14(hi)          | high bits mult
    15(ip)          | instruction pointer

‚Å°‚Å£‚Å¢‚Å¢Syscall Number      | Purpose‚Å°
---------------------
    0               | exit
    1               | print
   

‚Å°‚Å¢‚Å£‚Å¢Instructions:‚Å°
s - source register
d - dtination register
int - integer

$s0 refers register 0
$s0(1) refers register 0 + 1 byte

‚Å°‚Å¢‚Å£‚Å¢
Comparison Ops: ‚Å°
Result stored in d - 1 is True
-----------------------------------------

s1 > s2   
‚Å°‚Å£‚Å¢‚Å£grt s1 s2 d  
‚Å°|1| 1| 1| 1|

s1 < s2
‚Å°‚Å£‚Å¢‚Å£lst s1 s2 d‚Å°
|1| 1| 1| 1|

s1 == s2
‚Å°‚Å£‚Å¢‚Å£equ s1 s2 d‚Å°
|1| 1| 1| 1|


‚Å°‚Å¢‚Å£‚Å¢Integer Ops:‚Å°
Result stored in d 
------------------------------------------

s1 + int
‚Å°‚Å£‚Å¢‚Å£addi s1 d int‚Å°
|1|  1| 1|empty 1|4

s2 + s2 
‚Å°‚Å£‚Å¢‚Å£add s1 s2 d‚Å°
|1| 1| 1| 1|

s1*int Stores high bits in 16 and low bits in 15
‚Å°‚Å£‚Å¢‚Å£multi s1 int‚Å°
|1|   1 |empty 2| 4 |


s1*s2 Stores high bits in 16 and low bits in 15
‚Å°‚Å£‚Å¢‚Å£mult s1 s2
‚Å°|1  |1 |1 |empty 1|

s1 & s2
‚Å°‚Å£‚Å¢‚Å£and s1 s2 d‚Å°
|1| 1 |1| 1|

s1 | s2
‚Å°‚Å£‚Å¢‚Å£or s1 s2 d‚Å°
|1| 1 |1| 1|

s1 ^ s2
‚Å°‚Å£‚Å¢‚Å£xor s1 s2 d‚Å°
|1| 1 |1| 1|

~s1
‚Å°‚Å£‚Å¢‚Å£not s1‚Å°
|1| 1 |empty 2|

Shift s1 bits left, highermost bits discarded, lower bits replaced with 0
‚Å°‚Å£‚Å¢‚Å£sl s1‚Å°
|1| 1 |empty 2|

Shift s1 bits right, highermost bits replaced with 0, lower bits discarded
‚Å°‚Å£‚Å¢‚Å£sr s1‚Å°
|1| 1 |empty 2|

‚Å°‚Å¢‚Å£‚Å¢Memory Ops:‚Å°
------------------------------------------

Loads data from memory at s1 to s2
‚Å°‚Å£‚Å¢‚Å£ld s1 s2‚Å°
|1| 1 |1| empty|

Store s1 to memory at s2
‚Å°‚Å£‚Å¢‚Å£sr s1 s2‚Å°
|1| 1 |1| empty|

Moves s1 data to s2
‚Å°‚Å£‚Å¢‚Å£mv s1 s2‚Å°
|1| 1 |1| empty|

Returns back to return address(stored below frame pointer)
‚Å°‚Å£‚Å¢‚Å£ret‚Å°
|1| empty 3|

Do nothing
‚Å°‚Å£‚Å¢‚Å£nop‚Å°
|4|

‚Å°‚Å¢‚Å£‚Å¢Branching Ops:‚Å°
------------------------------------------

Moves instruction pointer to label if s1 > 0
‚Å°‚Å£‚Å¢‚Å£jmp s1 label‚Å°
|1| 1 |2|


Moves instruction pointer to label
‚Å°‚Å£‚Å¢‚Å£call label‚Å°
|1|  2    | empty 1

Performs syscall based on syscall number #NOTE 16 byte unsigned
‚Å°‚Å£‚Å¢‚Å£syscall int‚Å°
|1| 2| empty



‚Å°‚Å¢‚Å£‚Å¢.data‚Å° indicates string that should be stored in the stack
Each instruction is indicated by a new line
space separated between key words
